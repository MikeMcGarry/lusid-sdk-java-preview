/*
 * LUSID API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1389
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Options for controlling the default aspects and behaviour of the aggregation.
 */
@ApiModel(description = "Options for controlling the default aspects and behaviour of the aggregation.")

public class AggregationOptions {
  public static final String SERIALIZED_NAME_USE_ANSI_LIKE_SYNTAX = "useAnsiLikeSyntax";
  @SerializedName(SERIALIZED_NAME_USE_ANSI_LIKE_SYNTAX)
  private Boolean useAnsiLikeSyntax;

  public AggregationOptions useAnsiLikeSyntax(Boolean useAnsiLikeSyntax) {
    this.useAnsiLikeSyntax = useAnsiLikeSyntax;
    return this;
  }

   /**
   * Should the aggregation behave like ANSI Sql or MySql with respect to a conceptual request which is equivalent to \&quot;select a,sum(a) from results\&quot;;  ANSI Sql would report an error if a was not unique where MySql would simply view a,suma(a) as equivalent to firstof(a),sum(a).
   * @return useAnsiLikeSyntax
  **/
  @ApiModelProperty(value = "Should the aggregation behave like ANSI Sql or MySql with respect to a conceptual request which is equivalent to \"select a,sum(a) from results\";  ANSI Sql would report an error if a was not unique where MySql would simply view a,suma(a) as equivalent to firstof(a),sum(a).")
  public Boolean getUseAnsiLikeSyntax() {
    return useAnsiLikeSyntax;
  }

  public void setUseAnsiLikeSyntax(Boolean useAnsiLikeSyntax) {
    this.useAnsiLikeSyntax = useAnsiLikeSyntax;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AggregationOptions aggregationOptions = (AggregationOptions) o;
    return Objects.equals(this.useAnsiLikeSyntax, aggregationOptions.useAnsiLikeSyntax);
  }

  @Override
  public int hashCode() {
    return Objects.hash(useAnsiLikeSyntax);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AggregationOptions {\n");
    sb.append("    useAnsiLikeSyntax: ").append(toIndentedString(useAnsiLikeSyntax)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
