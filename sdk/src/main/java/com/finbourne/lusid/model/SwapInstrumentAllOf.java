/*
 * LUSID API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1386
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.InstrumentLeg;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * SwapInstrumentAllOf
 */

public class SwapInstrumentAllOf {
  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_MATURITY_DATE = "maturityDate";
  @SerializedName(SERIALIZED_NAME_MATURITY_DATE)
  private OffsetDateTime maturityDate;

  public static final String SERIALIZED_NAME_LEGS = "legs";
  @SerializedName(SERIALIZED_NAME_LEGS)
  private List<InstrumentLeg> legs = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOTIONAL = "notional";
  @SerializedName(SERIALIZED_NAME_NOTIONAL)
  private Double notional;

  public static final String SERIALIZED_NAME_IS_AMORTIZING = "isAmortizing";
  @SerializedName(SERIALIZED_NAME_IS_AMORTIZING)
  private Boolean isAmortizing;

  /**
   * True notional exchange type.
   */
  @JsonAdapter(NotionalExchangeTypeEnum.Adapter.class)
  public enum NotionalExchangeTypeEnum {
    NONE("None"),
    
    INITIAL("Initial"),
    
    FINAL("Final"),
    
    BOTH("Both");

    private String value;

    NotionalExchangeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NotionalExchangeTypeEnum fromValue(String value) {
      for (NotionalExchangeTypeEnum b : NotionalExchangeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NotionalExchangeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NotionalExchangeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NotionalExchangeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return NotionalExchangeTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_NOTIONAL_EXCHANGE_TYPE = "notionalExchangeType";
  @SerializedName(SERIALIZED_NAME_NOTIONAL_EXCHANGE_TYPE)
  private NotionalExchangeTypeEnum notionalExchangeType;

  /**
   * Instrument type, must be property for JSON.
   */
  @JsonAdapter(InstrumentTypeEnum.Adapter.class)
  public enum InstrumentTypeEnum {
    QUOTEDSECURITY("QuotedSecurity"),
    
    INTERESTRATESWAP("InterestRateSwap"),
    
    FXFORWARD("FxForward"),
    
    EXOTIC("Exotic"),
    
    FXOPTION("FxOption"),
    
    CREDITDEFAULTSWAP("CreditDefaultSwap"),
    
    INTERESTRATESWAPTION("InterestRateSwaption"),
    
    BOND("Bond"),
    
    EQUITYOPTION("EquityOption"),
    
    UNKNOWN("Unknown");

    private String value;

    InstrumentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InstrumentTypeEnum fromValue(String value) {
      for (InstrumentTypeEnum b : InstrumentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InstrumentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InstrumentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InstrumentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return InstrumentTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INSTRUMENT_TYPE = "instrumentType";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_TYPE)
  private InstrumentTypeEnum instrumentType;

  public SwapInstrumentAllOf startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * Starting date of the swap
   * @return startDate
  **/
  @ApiModelProperty(required = true, value = "Starting date of the swap")
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }

  public SwapInstrumentAllOf maturityDate(OffsetDateTime maturityDate) {
    this.maturityDate = maturityDate;
    return this;
  }

   /**
   * Maturity date of the swap
   * @return maturityDate
  **/
  @ApiModelProperty(required = true, value = "Maturity date of the swap")
  public OffsetDateTime getMaturityDate() {
    return maturityDate;
  }

  public void setMaturityDate(OffsetDateTime maturityDate) {
    this.maturityDate = maturityDate;
  }

  public SwapInstrumentAllOf legs(List<InstrumentLeg> legs) {
    this.legs = legs;
    return this;
  }

  public SwapInstrumentAllOf addLegsItem(InstrumentLeg legsItem) {
    this.legs.add(legsItem);
    return this;
  }

   /**
   * True if the swap is amortizing
   * @return legs
  **/
  @ApiModelProperty(required = true, value = "True if the swap is amortizing")
  public List<InstrumentLeg> getLegs() {
    return legs;
  }

  public void setLegs(List<InstrumentLeg> legs) {
    this.legs = legs;
  }

  public SwapInstrumentAllOf notional(Double notional) {
    this.notional = notional;
    return this;
  }

   /**
   * The notional.
   * @return notional
  **/
  @ApiModelProperty(required = true, value = "The notional.")
  public Double getNotional() {
    return notional;
  }

  public void setNotional(Double notional) {
    this.notional = notional;
  }

  public SwapInstrumentAllOf isAmortizing(Boolean isAmortizing) {
    this.isAmortizing = isAmortizing;
    return this;
  }

   /**
   * True if the swap is amortizing
   * @return isAmortizing
  **/
  @ApiModelProperty(required = true, value = "True if the swap is amortizing")
  public Boolean getIsAmortizing() {
    return isAmortizing;
  }

  public void setIsAmortizing(Boolean isAmortizing) {
    this.isAmortizing = isAmortizing;
  }

  public SwapInstrumentAllOf notionalExchangeType(NotionalExchangeTypeEnum notionalExchangeType) {
    this.notionalExchangeType = notionalExchangeType;
    return this;
  }

   /**
   * True notional exchange type.
   * @return notionalExchangeType
  **/
  @ApiModelProperty(required = true, value = "True notional exchange type.")
  public NotionalExchangeTypeEnum getNotionalExchangeType() {
    return notionalExchangeType;
  }

  public void setNotionalExchangeType(NotionalExchangeTypeEnum notionalExchangeType) {
    this.notionalExchangeType = notionalExchangeType;
  }

  public SwapInstrumentAllOf instrumentType(InstrumentTypeEnum instrumentType) {
    this.instrumentType = instrumentType;
    return this;
  }

   /**
   * Instrument type, must be property for JSON.
   * @return instrumentType
  **/
  @ApiModelProperty(required = true, value = "Instrument type, must be property for JSON.")
  public InstrumentTypeEnum getInstrumentType() {
    return instrumentType;
  }

  public void setInstrumentType(InstrumentTypeEnum instrumentType) {
    this.instrumentType = instrumentType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SwapInstrumentAllOf swapInstrumentAllOf = (SwapInstrumentAllOf) o;
    return Objects.equals(this.startDate, swapInstrumentAllOf.startDate) &&
        Objects.equals(this.maturityDate, swapInstrumentAllOf.maturityDate) &&
        Objects.equals(this.legs, swapInstrumentAllOf.legs) &&
        Objects.equals(this.notional, swapInstrumentAllOf.notional) &&
        Objects.equals(this.isAmortizing, swapInstrumentAllOf.isAmortizing) &&
        Objects.equals(this.notionalExchangeType, swapInstrumentAllOf.notionalExchangeType) &&
        Objects.equals(this.instrumentType, swapInstrumentAllOf.instrumentType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(startDate, maturityDate, legs, notional, isAmortizing, notionalExchangeType, instrumentType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SwapInstrumentAllOf {\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    maturityDate: ").append(toIndentedString(maturityDate)).append("\n");
    sb.append("    legs: ").append(toIndentedString(legs)).append("\n");
    sb.append("    notional: ").append(toIndentedString(notional)).append("\n");
    sb.append("    isAmortizing: ").append(toIndentedString(isAmortizing)).append("\n");
    sb.append("    notionalExchangeType: ").append(toIndentedString(notionalExchangeType)).append("\n");
    sb.append("    instrumentType: ").append(toIndentedString(instrumentType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
