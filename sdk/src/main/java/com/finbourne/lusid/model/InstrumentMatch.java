/*
 * LUSID API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1380
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.InstrumentDefinition;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * A collection of instrument search results
 */
@ApiModel(description = "A collection of instrument search results")

public class InstrumentMatch {
  public static final String SERIALIZED_NAME_MASTERED_INSTRUMENTS = "masteredInstruments";
  @SerializedName(SERIALIZED_NAME_MASTERED_INSTRUMENTS)
  private List<InstrumentDefinition> masteredInstruments = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTERNAL_INSTRUMENTS = "externalInstruments";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_INSTRUMENTS)
  private List<InstrumentDefinition> externalInstruments = new ArrayList<>();

  public InstrumentMatch masteredInstruments(List<InstrumentDefinition> masteredInstruments) {
    this.masteredInstruments = masteredInstruments;
    return this;
  }

  public InstrumentMatch addMasteredInstrumentsItem(InstrumentDefinition masteredInstrumentsItem) {
    if (this.masteredInstruments == null) {
      this.masteredInstruments = new ArrayList<>();
    }
    this.masteredInstruments.add(masteredInstrumentsItem);
    return this;
  }

   /**
   * The collection of instruments found by the search which have been mastered within LUSID.
   * @return masteredInstruments
  **/
  @ApiModelProperty(value = "The collection of instruments found by the search which have been mastered within LUSID.")
  public List<InstrumentDefinition> getMasteredInstruments() {
    return masteredInstruments;
  }

  public void setMasteredInstruments(List<InstrumentDefinition> masteredInstruments) {
    this.masteredInstruments = masteredInstruments;
  }

  public InstrumentMatch externalInstruments(List<InstrumentDefinition> externalInstruments) {
    this.externalInstruments = externalInstruments;
    return this;
  }

  public InstrumentMatch addExternalInstrumentsItem(InstrumentDefinition externalInstrumentsItem) {
    if (this.externalInstruments == null) {
      this.externalInstruments = new ArrayList<>();
    }
    this.externalInstruments.add(externalInstrumentsItem);
    return this;
  }

   /**
   * The collection of instruments found by the search which have not been mastered within LUSID and instead found via OpenFIGI.
   * @return externalInstruments
  **/
  @ApiModelProperty(value = "The collection of instruments found by the search which have not been mastered within LUSID and instead found via OpenFIGI.")
  public List<InstrumentDefinition> getExternalInstruments() {
    return externalInstruments;
  }

  public void setExternalInstruments(List<InstrumentDefinition> externalInstruments) {
    this.externalInstruments = externalInstruments;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstrumentMatch instrumentMatch = (InstrumentMatch) o;
    return Objects.equals(this.masteredInstruments, instrumentMatch.masteredInstruments) &&
        Objects.equals(this.externalInstruments, instrumentMatch.externalInstruments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(masteredInstruments, externalInstruments);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstrumentMatch {\n");
    sb.append("    masteredInstruments: ").append(toIndentedString(masteredInstruments)).append("\n");
    sb.append("    externalInstruments: ").append(toIndentedString(externalInstruments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
