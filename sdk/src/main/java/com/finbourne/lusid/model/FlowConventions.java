/*
 * LUSID API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1389
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.Tenor;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * A flow convention defines the specification for generation of the date schedule for a leg or set of cashflows.  It determines the tenor of these and, how to map the unadjusted set of dates to dates which are &#39;good business  days&#39;. For example, if an unadjusted date falls on a Saturday or a bank holiday, should it be rolled forward  or backward to obtain the adjusted date.
 */
@ApiModel(description = "A flow convention defines the specification for generation of the date schedule for a leg or set of cashflows.  It determines the tenor of these and, how to map the unadjusted set of dates to dates which are 'good business  days'. For example, if an unadjusted date falls on a Saturday or a bank holiday, should it be rolled forward  or backward to obtain the adjusted date.")

public class FlowConventions {
  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_PAYMENT_FREQUENCY = "paymentFrequency";
  @SerializedName(SERIALIZED_NAME_PAYMENT_FREQUENCY)
  private Tenor paymentFrequency = null;

  /**
   * when calculating the fraction of a year between two dates, what convention is used to represent the number of days in a year  and difference between them.
   */
  @JsonAdapter(DayCountConventionEnum.Adapter.class)
  public enum DayCountConventionEnum {
    ACTUAL360("Actual360"),
    
    ACT360("Act360"),
    
    MONEYMARKET("MoneyMarket"),
    
    ACTUAL365("Actual365"),
    
    ACT365("Act365"),
    
    THIRTY360("Thirty360"),
    
    THIRTYU360("ThirtyU360"),
    
    BOND("Bond"),
    
    THIRTYE360("ThirtyE360"),
    
    EUROBOND("EuroBond"),
    
    ACTACT("ActAct"),
    
    ACTUALACTUAL("ActualActual"),
    
    ACTACTISDA("ActActIsda"),
    
    INVALID("Invalid");

    private String value;

    DayCountConventionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DayCountConventionEnum fromValue(String value) {
      for (DayCountConventionEnum b : DayCountConventionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DayCountConventionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DayCountConventionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DayCountConventionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DayCountConventionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DAY_COUNT_CONVENTION = "dayCountConvention";
  @SerializedName(SERIALIZED_NAME_DAY_COUNT_CONVENTION)
  private DayCountConventionEnum dayCountConvention;

  /**
   * when generating a set of dates, what convention should be used for adjusting dates that coincide with a non-business day.
   */
  @JsonAdapter(RollConventionEnum.Adapter.class)
  public enum RollConventionEnum {
    NOADJUSTMENT("NoAdjustment"),
    
    NONE("None"),
    
    PREVIOUS("Previous"),
    
    P("P"),
    
    FOLLOWING("Following"),
    
    F("F"),
    
    MODIFIEDPREVIOUS("ModifiedPrevious"),
    
    MP("MP"),
    
    MODIFIEDFOLLOWING("ModifiedFollowing"),
    
    MF("MF"),
    
    ENDOFMONTH("EndOfMonth"),
    
    EOM("EOM"),
    
    ENDOFMONTHPREVIOUS("EndOfMonthPrevious"),
    
    EOMP("EOMP"),
    
    ENDOFMONTHFOLLOWING("EndOfMonthFollowing"),
    
    EOMF("EOMF"),
    
    INVALID("Invalid");

    private String value;

    RollConventionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RollConventionEnum fromValue(String value) {
      for (RollConventionEnum b : RollConventionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RollConventionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RollConventionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RollConventionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RollConventionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ROLL_CONVENTION = "rollConvention";
  @SerializedName(SERIALIZED_NAME_ROLL_CONVENTION)
  private RollConventionEnum rollConvention;

  public static final String SERIALIZED_NAME_HOLIDAY_CALENDARS = "holidayCalendars";
  @SerializedName(SERIALIZED_NAME_HOLIDAY_CALENDARS)
  private List<String> holidayCalendars = new ArrayList<>();

  public FlowConventions currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Currency of the flow convention.
   * @return currency
  **/
  @ApiModelProperty(required = true, value = "Currency of the flow convention.")
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public FlowConventions paymentFrequency(Tenor paymentFrequency) {
    this.paymentFrequency = paymentFrequency;
    return this;
  }

   /**
   * Get paymentFrequency
   * @return paymentFrequency
  **/
  @ApiModelProperty(required = true, value = "")
  public Tenor getPaymentFrequency() {
    return paymentFrequency;
  }

  public void setPaymentFrequency(Tenor paymentFrequency) {
    this.paymentFrequency = paymentFrequency;
  }

  public FlowConventions dayCountConvention(DayCountConventionEnum dayCountConvention) {
    this.dayCountConvention = dayCountConvention;
    return this;
  }

   /**
   * when calculating the fraction of a year between two dates, what convention is used to represent the number of days in a year  and difference between them.
   * @return dayCountConvention
  **/
  @ApiModelProperty(required = true, value = "when calculating the fraction of a year between two dates, what convention is used to represent the number of days in a year  and difference between them.")
  public DayCountConventionEnum getDayCountConvention() {
    return dayCountConvention;
  }

  public void setDayCountConvention(DayCountConventionEnum dayCountConvention) {
    this.dayCountConvention = dayCountConvention;
  }

  public FlowConventions rollConvention(RollConventionEnum rollConvention) {
    this.rollConvention = rollConvention;
    return this;
  }

   /**
   * when generating a set of dates, what convention should be used for adjusting dates that coincide with a non-business day.
   * @return rollConvention
  **/
  @ApiModelProperty(required = true, value = "when generating a set of dates, what convention should be used for adjusting dates that coincide with a non-business day.")
  public RollConventionEnum getRollConvention() {
    return rollConvention;
  }

  public void setRollConvention(RollConventionEnum rollConvention) {
    this.rollConvention = rollConvention;
  }

  public FlowConventions holidayCalendars(List<String> holidayCalendars) {
    this.holidayCalendars = holidayCalendars;
    return this;
  }

  public FlowConventions addHolidayCalendarsItem(String holidayCalendarsItem) {
    this.holidayCalendars.add(holidayCalendarsItem);
    return this;
  }

   /**
   * An array of strings denoting holiday calendars that apply to generation and payment.
   * @return holidayCalendars
  **/
  @ApiModelProperty(required = true, value = "An array of strings denoting holiday calendars that apply to generation and payment.")
  public List<String> getHolidayCalendars() {
    return holidayCalendars;
  }

  public void setHolidayCalendars(List<String> holidayCalendars) {
    this.holidayCalendars = holidayCalendars;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlowConventions flowConventions = (FlowConventions) o;
    return Objects.equals(this.currency, flowConventions.currency) &&
        Objects.equals(this.paymentFrequency, flowConventions.paymentFrequency) &&
        Objects.equals(this.dayCountConvention, flowConventions.dayCountConvention) &&
        Objects.equals(this.rollConvention, flowConventions.rollConvention) &&
        Objects.equals(this.holidayCalendars, flowConventions.holidayCalendars);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currency, paymentFrequency, dayCountConvention, rollConvention, holidayCalendars);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlowConventions {\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    paymentFrequency: ").append(toIndentedString(paymentFrequency)).append("\n");
    sb.append("    dayCountConvention: ").append(toIndentedString(dayCountConvention)).append("\n");
    sb.append("    rollConvention: ").append(toIndentedString(rollConvention)).append("\n");
    sb.append("    holidayCalendars: ").append(toIndentedString(holidayCalendars)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
