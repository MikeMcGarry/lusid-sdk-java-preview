/*
 * LUSID API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1389
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * PropertyFilter
 */

public class PropertyFilter {
  public static final String SERIALIZED_NAME_LEFT = "left";
  @SerializedName(SERIALIZED_NAME_LEFT)
  private String left;

  /**
   * Gets or Sets operator
   */
  @JsonAdapter(OperatorEnum.Adapter.class)
  public enum OperatorEnum {
    EQUALS("Equals"),
    
    NOTEQUALS("NotEquals"),
    
    GREATERTHAN("GreaterThan"),
    
    GREATERTHANOREQUALTO("GreaterThanOrEqualTo"),
    
    LESSTHAN("LessThan"),
    
    LESSTHANOREQUALTO("LessThanOrEqualTo"),
    
    IN("In");

    private String value;

    OperatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperatorEnum fromValue(String value) {
      for (OperatorEnum b : OperatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperatorEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OperatorEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OPERATOR = "operator";
  @SerializedName(SERIALIZED_NAME_OPERATOR)
  private OperatorEnum operator;

  public static final String SERIALIZED_NAME_RIGHT = "right";
  @SerializedName(SERIALIZED_NAME_RIGHT)
  private Object right = null;

  /**
   * Gets or Sets rightOperandType
   */
  @JsonAdapter(RightOperandTypeEnum.Adapter.class)
  public enum RightOperandTypeEnum {
    ABSOLUTE("Absolute"),
    
    PROPERTY("Property");

    private String value;

    RightOperandTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RightOperandTypeEnum fromValue(String value) {
      for (RightOperandTypeEnum b : RightOperandTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RightOperandTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RightOperandTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RightOperandTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RightOperandTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RIGHT_OPERAND_TYPE = "rightOperandType";
  @SerializedName(SERIALIZED_NAME_RIGHT_OPERAND_TYPE)
  private RightOperandTypeEnum rightOperandType;

  public PropertyFilter left(String left) {
    this.left = left;
    return this;
  }

   /**
   * Get left
   * @return left
  **/
  @ApiModelProperty(value = "")
  public String getLeft() {
    return left;
  }

  public void setLeft(String left) {
    this.left = left;
  }

  public PropertyFilter operator(OperatorEnum operator) {
    this.operator = operator;
    return this;
  }

   /**
   * Get operator
   * @return operator
  **/
  @ApiModelProperty(value = "")
  public OperatorEnum getOperator() {
    return operator;
  }

  public void setOperator(OperatorEnum operator) {
    this.operator = operator;
  }

  public PropertyFilter right(Object right) {
    this.right = right;
    return this;
  }

   /**
   * Get right
   * @return right
  **/
  @ApiModelProperty(value = "")
  public Object getRight() {
    return right;
  }

  public void setRight(Object right) {
    this.right = right;
  }

  public PropertyFilter rightOperandType(RightOperandTypeEnum rightOperandType) {
    this.rightOperandType = rightOperandType;
    return this;
  }

   /**
   * Get rightOperandType
   * @return rightOperandType
  **/
  @ApiModelProperty(value = "")
  public RightOperandTypeEnum getRightOperandType() {
    return rightOperandType;
  }

  public void setRightOperandType(RightOperandTypeEnum rightOperandType) {
    this.rightOperandType = rightOperandType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertyFilter propertyFilter = (PropertyFilter) o;
    return Objects.equals(this.left, propertyFilter.left) &&
        Objects.equals(this.operator, propertyFilter.operator) &&
        Objects.equals(this.right, propertyFilter.right) &&
        Objects.equals(this.rightOperandType, propertyFilter.rightOperandType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(left, operator, right, rightOperandType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropertyFilter {\n");
    sb.append("    left: ").append(toIndentedString(left)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    right: ").append(toIndentedString(right)).append("\n");
    sb.append("    rightOperandType: ").append(toIndentedString(rightOperandType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
