/*
 * LUSID API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1387
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * The time invariant unique identifier of the quote. Combined with the effective datetime of the quote this  uniquely identifies the quote. This can be thought of as a unique identifier for a time series of quotes.
 */
@ApiModel(description = "The time invariant unique identifier of the quote. Combined with the effective datetime of the quote this  uniquely identifies the quote. This can be thought of as a unique identifier for a time series of quotes.")

public class QuoteSeriesId {
  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  public static final String SERIALIZED_NAME_PRICE_SOURCE = "priceSource";
  @SerializedName(SERIALIZED_NAME_PRICE_SOURCE)
  private String priceSource;

  public static final String SERIALIZED_NAME_INSTRUMENT_ID = "instrumentId";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_ID)
  private String instrumentId;

  /**
   * The type of instrument identifier used to uniquely identify the instrument that the quote is for, e.g. &#39;Figi&#39;.
   */
  @JsonAdapter(InstrumentIdTypeEnum.Adapter.class)
  public enum InstrumentIdTypeEnum {
    LUSIDINSTRUMENTID("LusidInstrumentId"),
    
    FIGI("Figi"),
    
    RIC("RIC"),
    
    QUOTEPERMID("QuotePermId"),
    
    ISIN("Isin"),
    
    CURRENCYPAIR("CurrencyPair");

    private String value;

    InstrumentIdTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InstrumentIdTypeEnum fromValue(String value) {
      for (InstrumentIdTypeEnum b : InstrumentIdTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InstrumentIdTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InstrumentIdTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InstrumentIdTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return InstrumentIdTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INSTRUMENT_ID_TYPE = "instrumentIdType";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_ID_TYPE)
  private InstrumentIdTypeEnum instrumentIdType;

  /**
   * The type of the quote. This allows for quotes other than prices e.g. rates or spreads to be used.
   */
  @JsonAdapter(QuoteTypeEnum.Adapter.class)
  public enum QuoteTypeEnum {
    PRICE("Price"),
    
    SPREAD("Spread"),
    
    RATE("Rate"),
    
    LOGNORMALVOL("LogNormalVol"),
    
    NORMALVOL("NormalVol"),
    
    PARSPREAD("ParSpread"),
    
    ISDASPREAD("IsdaSpread"),
    
    UPFRONT("Upfront");

    private String value;

    QuoteTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QuoteTypeEnum fromValue(String value) {
      for (QuoteTypeEnum b : QuoteTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<QuoteTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QuoteTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QuoteTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return QuoteTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_QUOTE_TYPE = "quoteType";
  @SerializedName(SERIALIZED_NAME_QUOTE_TYPE)
  private QuoteTypeEnum quoteType;

  public static final String SERIALIZED_NAME_FIELD = "field";
  @SerializedName(SERIALIZED_NAME_FIELD)
  private String field;

  public QuoteSeriesId provider(String provider) {
    this.provider = provider;
    return this;
  }

   /**
   * The platform or vendor that provided the quote, e.g. &#39;DataScope&#39;, &#39;LUSID&#39; etc.
   * @return provider
  **/
  @ApiModelProperty(required = true, value = "The platform or vendor that provided the quote, e.g. 'DataScope', 'LUSID' etc.")
  public String getProvider() {
    return provider;
  }

  public void setProvider(String provider) {
    this.provider = provider;
  }

  public QuoteSeriesId priceSource(String priceSource) {
    this.priceSource = priceSource;
    return this;
  }

   /**
   * The source or originator of the quote, e.g. a bank or financial institution.
   * @return priceSource
  **/
  @ApiModelProperty(value = "The source or originator of the quote, e.g. a bank or financial institution.")
  public String getPriceSource() {
    return priceSource;
  }

  public void setPriceSource(String priceSource) {
    this.priceSource = priceSource;
  }

  public QuoteSeriesId instrumentId(String instrumentId) {
    this.instrumentId = instrumentId;
    return this;
  }

   /**
   * The value of the instrument identifier that uniquely identifies the instrument that the quote is for, e.g. &#39;BBG00JX0P539&#39;.
   * @return instrumentId
  **/
  @ApiModelProperty(required = true, value = "The value of the instrument identifier that uniquely identifies the instrument that the quote is for, e.g. 'BBG00JX0P539'.")
  public String getInstrumentId() {
    return instrumentId;
  }

  public void setInstrumentId(String instrumentId) {
    this.instrumentId = instrumentId;
  }

  public QuoteSeriesId instrumentIdType(InstrumentIdTypeEnum instrumentIdType) {
    this.instrumentIdType = instrumentIdType;
    return this;
  }

   /**
   * The type of instrument identifier used to uniquely identify the instrument that the quote is for, e.g. &#39;Figi&#39;.
   * @return instrumentIdType
  **/
  @ApiModelProperty(required = true, value = "The type of instrument identifier used to uniquely identify the instrument that the quote is for, e.g. 'Figi'.")
  public InstrumentIdTypeEnum getInstrumentIdType() {
    return instrumentIdType;
  }

  public void setInstrumentIdType(InstrumentIdTypeEnum instrumentIdType) {
    this.instrumentIdType = instrumentIdType;
  }

  public QuoteSeriesId quoteType(QuoteTypeEnum quoteType) {
    this.quoteType = quoteType;
    return this;
  }

   /**
   * The type of the quote. This allows for quotes other than prices e.g. rates or spreads to be used.
   * @return quoteType
  **/
  @ApiModelProperty(required = true, value = "The type of the quote. This allows for quotes other than prices e.g. rates or spreads to be used.")
  public QuoteTypeEnum getQuoteType() {
    return quoteType;
  }

  public void setQuoteType(QuoteTypeEnum quoteType) {
    this.quoteType = quoteType;
  }

  public QuoteSeriesId field(String field) {
    this.field = field;
    return this;
  }

   /**
   * The field of the quote e.g. bid, mid, ask etc. This should be consistent across a time series of quotes. The allowed values are dependant on the specified Provider.
   * @return field
  **/
  @ApiModelProperty(required = true, value = "The field of the quote e.g. bid, mid, ask etc. This should be consistent across a time series of quotes. The allowed values are dependant on the specified Provider.")
  public String getField() {
    return field;
  }

  public void setField(String field) {
    this.field = field;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuoteSeriesId quoteSeriesId = (QuoteSeriesId) o;
    return Objects.equals(this.provider, quoteSeriesId.provider) &&
        Objects.equals(this.priceSource, quoteSeriesId.priceSource) &&
        Objects.equals(this.instrumentId, quoteSeriesId.instrumentId) &&
        Objects.equals(this.instrumentIdType, quoteSeriesId.instrumentIdType) &&
        Objects.equals(this.quoteType, quoteSeriesId.quoteType) &&
        Objects.equals(this.field, quoteSeriesId.field);
  }

  @Override
  public int hashCode() {
    return Objects.hash(provider, priceSource, instrumentId, instrumentIdType, quoteType, field);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuoteSeriesId {\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    priceSource: ").append(toIndentedString(priceSource)).append("\n");
    sb.append("    instrumentId: ").append(toIndentedString(instrumentId)).append("\n");
    sb.append("    instrumentIdType: ").append(toIndentedString(instrumentIdType)).append("\n");
    sb.append("    quoteType: ").append(toIndentedString(quoteType)).append("\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
