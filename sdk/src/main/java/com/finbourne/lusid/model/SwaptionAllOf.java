/*
 * LUSID API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1381
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.LusidInstrument;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * SwaptionAllOf
 */

public class SwaptionAllOf {
  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_IS_PAYER_NOT_RECEIVER = "isPayerNotReceiver";
  @SerializedName(SERIALIZED_NAME_IS_PAYER_NOT_RECEIVER)
  private Boolean isPayerNotReceiver;

  public static final String SERIALIZED_NAME_IS_DELIVERY_NOT_CASH = "isDeliveryNotCash";
  @SerializedName(SERIALIZED_NAME_IS_DELIVERY_NOT_CASH)
  private Boolean isDeliveryNotCash;

  public static final String SERIALIZED_NAME_SWAP = "swap";
  @SerializedName(SERIALIZED_NAME_SWAP)
  private LusidInstrument swap = null;

  /**
   * Instrument type, must be property for JSON.
   */
  @JsonAdapter(InstrumentTypeEnum.Adapter.class)
  public enum InstrumentTypeEnum {
    QUOTEDSECURITY("QuotedSecurity"),
    
    INTERESTRATESWAP("InterestRateSwap"),
    
    FXFORWARD("FxForward"),
    
    EXOTIC("Exotic"),
    
    FXOPTION("FxOption"),
    
    CREDITDEFAULTSWAP("CreditDefaultSwap"),
    
    INTERESTRATESWAPTION("InterestRateSwaption"),
    
    BOND("Bond"),
    
    EQUITYOPTION("EquityOption"),
    
    UNKNOWN("Unknown");

    private String value;

    InstrumentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InstrumentTypeEnum fromValue(String value) {
      for (InstrumentTypeEnum b : InstrumentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InstrumentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InstrumentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InstrumentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return InstrumentTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INSTRUMENT_TYPE = "instrumentType";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_TYPE)
  private InstrumentTypeEnum instrumentType;

  public SwaptionAllOf startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @ApiModelProperty(required = true, value = "")
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }

  public SwaptionAllOf isPayerNotReceiver(Boolean isPayerNotReceiver) {
    this.isPayerNotReceiver = isPayerNotReceiver;
    return this;
  }

   /**
   * True if on exercise the holder of the option enters the swap paying fixed, false if floating.
   * @return isPayerNotReceiver
  **/
  @ApiModelProperty(required = true, value = "True if on exercise the holder of the option enters the swap paying fixed, false if floating.")
  public Boolean getIsPayerNotReceiver() {
    return isPayerNotReceiver;
  }

  public void setIsPayerNotReceiver(Boolean isPayerNotReceiver) {
    this.isPayerNotReceiver = isPayerNotReceiver;
  }

  public SwaptionAllOf isDeliveryNotCash(Boolean isDeliveryNotCash) {
    this.isDeliveryNotCash = isDeliveryNotCash;
    return this;
  }

   /**
   * True of the option is settled in cash false if by delivery of the swap.
   * @return isDeliveryNotCash
  **/
  @ApiModelProperty(required = true, value = "True of the option is settled in cash false if by delivery of the swap.")
  public Boolean getIsDeliveryNotCash() {
    return isDeliveryNotCash;
  }

  public void setIsDeliveryNotCash(Boolean isDeliveryNotCash) {
    this.isDeliveryNotCash = isDeliveryNotCash;
  }

  public SwaptionAllOf swap(LusidInstrument swap) {
    this.swap = swap;
    return this;
  }

   /**
   * Get swap
   * @return swap
  **/
  @ApiModelProperty(required = true, value = "")
  public LusidInstrument getSwap() {
    return swap;
  }

  public void setSwap(LusidInstrument swap) {
    this.swap = swap;
  }

  public SwaptionAllOf instrumentType(InstrumentTypeEnum instrumentType) {
    this.instrumentType = instrumentType;
    return this;
  }

   /**
   * Instrument type, must be property for JSON.
   * @return instrumentType
  **/
  @ApiModelProperty(required = true, value = "Instrument type, must be property for JSON.")
  public InstrumentTypeEnum getInstrumentType() {
    return instrumentType;
  }

  public void setInstrumentType(InstrumentTypeEnum instrumentType) {
    this.instrumentType = instrumentType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SwaptionAllOf swaptionAllOf = (SwaptionAllOf) o;
    return Objects.equals(this.startDate, swaptionAllOf.startDate) &&
        Objects.equals(this.isPayerNotReceiver, swaptionAllOf.isPayerNotReceiver) &&
        Objects.equals(this.isDeliveryNotCash, swaptionAllOf.isDeliveryNotCash) &&
        Objects.equals(this.swap, swaptionAllOf.swap) &&
        Objects.equals(this.instrumentType, swaptionAllOf.instrumentType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(startDate, isPayerNotReceiver, isDeliveryNotCash, swap, instrumentType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SwaptionAllOf {\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    isPayerNotReceiver: ").append(toIndentedString(isPayerNotReceiver)).append("\n");
    sb.append("    isDeliveryNotCash: ").append(toIndentedString(isDeliveryNotCash)).append("\n");
    sb.append("    swap: ").append(toIndentedString(swap)).append("\n");
    sb.append("    instrumentType: ").append(toIndentedString(instrumentType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
