/*
 * LUSID API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1387
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * A market data key rule describes a mapping for satisfying a particular market dependency. The supplier, scope, quote type and price side  information define the quote in the market and which Vendor for market data would be used to perform the lookup.  The market data key defines what dependency this satisfies. The key is a rule that describes the asset class, its identifier and any other  specifics required to uniquely describe a specific economic entity (e.g. an Fx currency pair, equity name or credit curve).
 */
@ApiModel(description = "A market data key rule describes a mapping for satisfying a particular market dependency. The supplier, scope, quote type and price side  information define the quote in the market and which Vendor for market data would be used to perform the lookup.  The market data key defines what dependency this satisfies. The key is a rule that describes the asset class, its identifier and any other  specifics required to uniquely describe a specific economic entity (e.g. an Fx currency pair, equity name or credit curve).")

public class MarketDataKeyRule {
  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  /**
   * The market data supplier (where the data comes from)
   */
  @JsonAdapter(SupplierEnum.Adapter.class)
  public enum SupplierEnum {
    DATASCOPE("DataScope"),
    
    LUSID("Lusid"),
    
    ISDA("Isda"),
    
    CLIENT("Client"),
    
    EDI("Edi"),
    
    TRADERMADE("TraderMade"),
    
    FACTSET("FactSet");

    private String value;

    SupplierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SupplierEnum fromValue(String value) {
      for (SupplierEnum b : SupplierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SupplierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SupplierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SupplierEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SupplierEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SUPPLIER = "supplier";
  @SerializedName(SERIALIZED_NAME_SUPPLIER)
  private SupplierEnum supplier;

  public static final String SERIALIZED_NAME_DATA_SCOPE = "dataScope";
  @SerializedName(SERIALIZED_NAME_DATA_SCOPE)
  private String dataScope;

  /**
   * Is the quote to be looked for a price, yield etc.
   */
  @JsonAdapter(QuoteTypeEnum.Adapter.class)
  public enum QuoteTypeEnum {
    PRICE("Price"),
    
    SPREAD("Spread"),
    
    RATE("Rate"),
    
    LOGNORMALVOL("LogNormalVol"),
    
    NORMALVOL("NormalVol"),
    
    PARSPREAD("ParSpread"),
    
    ISDASPREAD("IsdaSpread"),
    
    UPFRONT("Upfront");

    private String value;

    QuoteTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QuoteTypeEnum fromValue(String value) {
      for (QuoteTypeEnum b : QuoteTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<QuoteTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QuoteTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QuoteTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return QuoteTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_QUOTE_TYPE = "quoteType";
  @SerializedName(SERIALIZED_NAME_QUOTE_TYPE)
  private QuoteTypeEnum quoteType;

  public static final String SERIALIZED_NAME_FIELD = "field";
  @SerializedName(SERIALIZED_NAME_FIELD)
  private String field;

  public static final String SERIALIZED_NAME_QUOTE_INTERVAL = "quoteInterval";
  @SerializedName(SERIALIZED_NAME_QUOTE_INTERVAL)
  private String quoteInterval;

  public static final String SERIALIZED_NAME_AS_AT = "asAt";
  @SerializedName(SERIALIZED_NAME_AS_AT)
  private OffsetDateTime asAt;

  public static final String SERIALIZED_NAME_PRICE_SOURCE = "priceSource";
  @SerializedName(SERIALIZED_NAME_PRICE_SOURCE)
  private String priceSource;

  public MarketDataKeyRule key(String key) {
    this.key = key;
    return this;
  }

   /**
   * The market data key pattern which this is a rule for. A dot separated string (A.B.C.D.*)
   * @return key
  **/
  @ApiModelProperty(required = true, value = "The market data key pattern which this is a rule for. A dot separated string (A.B.C.D.*)")
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }

  public MarketDataKeyRule supplier(SupplierEnum supplier) {
    this.supplier = supplier;
    return this;
  }

   /**
   * The market data supplier (where the data comes from)
   * @return supplier
  **/
  @ApiModelProperty(required = true, value = "The market data supplier (where the data comes from)")
  public SupplierEnum getSupplier() {
    return supplier;
  }

  public void setSupplier(SupplierEnum supplier) {
    this.supplier = supplier;
  }

  public MarketDataKeyRule dataScope(String dataScope) {
    this.dataScope = dataScope;
    return this;
  }

   /**
   * The scope in which the data should be found when using this rule.
   * @return dataScope
  **/
  @ApiModelProperty(required = true, value = "The scope in which the data should be found when using this rule.")
  public String getDataScope() {
    return dataScope;
  }

  public void setDataScope(String dataScope) {
    this.dataScope = dataScope;
  }

  public MarketDataKeyRule quoteType(QuoteTypeEnum quoteType) {
    this.quoteType = quoteType;
    return this;
  }

   /**
   * Is the quote to be looked for a price, yield etc.
   * @return quoteType
  **/
  @ApiModelProperty(required = true, value = "Is the quote to be looked for a price, yield etc.")
  public QuoteTypeEnum getQuoteType() {
    return quoteType;
  }

  public void setQuoteType(QuoteTypeEnum quoteType) {
    this.quoteType = quoteType;
  }

  public MarketDataKeyRule field(String field) {
    this.field = field;
    return this;
  }

   /**
   * The conceptual qualification for the field, such as bid, mid, or ask.   The field must be one of a defined set for the given supplier, in the same way as it  is for the Finbourne.WebApi.Interface.Dto.Quotes.QuoteSeriesId
   * @return field
  **/
  @ApiModelProperty(required = true, value = "The conceptual qualification for the field, such as bid, mid, or ask.   The field must be one of a defined set for the given supplier, in the same way as it  is for the Finbourne.WebApi.Interface.Dto.Quotes.QuoteSeriesId")
  public String getField() {
    return field;
  }

  public void setField(String field) {
    this.field = field;
  }

  public MarketDataKeyRule quoteInterval(String quoteInterval) {
    this.quoteInterval = quoteInterval;
    return this;
  }

   /**
   * Shorthand for the time interval used to select market data.
   * @return quoteInterval
  **/
  @ApiModelProperty(value = "Shorthand for the time interval used to select market data.")
  public String getQuoteInterval() {
    return quoteInterval;
  }

  public void setQuoteInterval(String quoteInterval) {
    this.quoteInterval = quoteInterval;
  }

  public MarketDataKeyRule asAt(OffsetDateTime asAt) {
    this.asAt = asAt;
    return this;
  }

   /**
   * The AsAt predicate specification.
   * @return asAt
  **/
  @ApiModelProperty(value = "The AsAt predicate specification.")
  public OffsetDateTime getAsAt() {
    return asAt;
  }

  public void setAsAt(OffsetDateTime asAt) {
    this.asAt = asAt;
  }

  public MarketDataKeyRule priceSource(String priceSource) {
    this.priceSource = priceSource;
    return this;
  }

   /**
   * The source of the quote. For a given provider/supplier of market data there may be an additional qualifier, e.g. the exchange or bank that provided the quote
   * @return priceSource
  **/
  @ApiModelProperty(value = "The source of the quote. For a given provider/supplier of market data there may be an additional qualifier, e.g. the exchange or bank that provided the quote")
  public String getPriceSource() {
    return priceSource;
  }

  public void setPriceSource(String priceSource) {
    this.priceSource = priceSource;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarketDataKeyRule marketDataKeyRule = (MarketDataKeyRule) o;
    return Objects.equals(this.key, marketDataKeyRule.key) &&
        Objects.equals(this.supplier, marketDataKeyRule.supplier) &&
        Objects.equals(this.dataScope, marketDataKeyRule.dataScope) &&
        Objects.equals(this.quoteType, marketDataKeyRule.quoteType) &&
        Objects.equals(this.field, marketDataKeyRule.field) &&
        Objects.equals(this.quoteInterval, marketDataKeyRule.quoteInterval) &&
        Objects.equals(this.asAt, marketDataKeyRule.asAt) &&
        Objects.equals(this.priceSource, marketDataKeyRule.priceSource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(key, supplier, dataScope, quoteType, field, quoteInterval, asAt, priceSource);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarketDataKeyRule {\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    supplier: ").append(toIndentedString(supplier)).append("\n");
    sb.append("    dataScope: ").append(toIndentedString(dataScope)).append("\n");
    sb.append("    quoteType: ").append(toIndentedString(quoteType)).append("\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    quoteInterval: ").append(toIndentedString(quoteInterval)).append("\n");
    sb.append("    asAt: ").append(toIndentedString(asAt)).append("\n");
    sb.append("    priceSource: ").append(toIndentedString(priceSource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
