/*
 * LUSID API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1389
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * The combination of a library to use and a model in that library that defines which pricing code will evaluate instruments  having a particular type/class. This allows us to control the model type and library for a given instrument.
 */
@ApiModel(description = "The combination of a library to use and a model in that library that defines which pricing code will evaluate instruments  having a particular type/class. This allows us to control the model type and library for a given instrument.")

public class ModelSelection {
  /**
   * Which library is used for pricing requests
   */
  @JsonAdapter(LibraryEnum.Adapter.class)
  public enum LibraryEnum {
    LUSID("Lusid"),
    
    REFINITIVQPS("RefinitivQps"),
    
    REFINITIVTRACSWEB("RefinitivTracsWeb"),
    
    VOLMASTER("VolMaster"),
    
    ISDACDS("IsdaCds");

    private String value;

    LibraryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LibraryEnum fromValue(String value) {
      for (LibraryEnum b : LibraryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LibraryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LibraryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LibraryEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LibraryEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LIBRARY = "library";
  @SerializedName(SERIALIZED_NAME_LIBRARY)
  private LibraryEnum library;

  /**
   * Which model should be used for pricing requests
   */
  @JsonAdapter(ModelEnum.Adapter.class)
  public enum ModelEnum {
    SIMPLESTATIC("SimpleStatic"),
    
    DISCOUNTING("Discounting"),
    
    VENDORDEFAULT("VendorDefault"),
    
    BLACKSCHOLES("BlackScholes");

    private String value;

    ModelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModelEnum fromValue(String value) {
      for (ModelEnum b : ModelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModelEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ModelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private ModelEnum model;

  public ModelSelection library(LibraryEnum library) {
    this.library = library;
    return this;
  }

   /**
   * Which library is used for pricing requests
   * @return library
  **/
  @ApiModelProperty(required = true, value = "Which library is used for pricing requests")
  public LibraryEnum getLibrary() {
    return library;
  }

  public void setLibrary(LibraryEnum library) {
    this.library = library;
  }

  public ModelSelection model(ModelEnum model) {
    this.model = model;
    return this;
  }

   /**
   * Which model should be used for pricing requests
   * @return model
  **/
  @ApiModelProperty(required = true, value = "Which model should be used for pricing requests")
  public ModelEnum getModel() {
    return model;
  }

  public void setModel(ModelEnum model) {
    this.model = model;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelSelection modelSelection = (ModelSelection) o;
    return Objects.equals(this.library, modelSelection.library) &&
        Objects.equals(this.model, modelSelection.model);
  }

  @Override
  public int hashCode() {
    return Objects.hash(library, model);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelSelection {\n");
    sb.append("    library: ").append(toIndentedString(library)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
