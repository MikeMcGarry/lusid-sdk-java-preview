/*
 * LUSID API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1391
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.FlowConventions;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * The leg of the swap.
 */
@ApiModel(description = "The leg of the swap.")

public class InstrumentLeg {
  public static final String SERIALIZED_NAME_CONVENTIONS = "conventions";
  @SerializedName(SERIALIZED_NAME_CONVENTIONS)
  private FlowConventions conventions = null;

  public static final String SERIALIZED_NAME_IS_PAY_NOT_RECEIVE = "isPayNotReceive";
  @SerializedName(SERIALIZED_NAME_IS_PAY_NOT_RECEIVE)
  private Boolean isPayNotReceive;

  public static final String SERIALIZED_NAME_IS_FLOAT_NOT_FIXED = "isFloatNotFixed";
  @SerializedName(SERIALIZED_NAME_IS_FLOAT_NOT_FIXED)
  private Boolean isFloatNotFixed;

  public static final String SERIALIZED_NAME_FIXED_RATE = "fixedRate";
  @SerializedName(SERIALIZED_NAME_FIXED_RATE)
  private Double fixedRate;

  public InstrumentLeg conventions(FlowConventions conventions) {
    this.conventions = conventions;
    return this;
  }

   /**
   * Get conventions
   * @return conventions
  **/
  @ApiModelProperty(required = true, value = "")
  public FlowConventions getConventions() {
    return conventions;
  }

  public void setConventions(FlowConventions conventions) {
    this.conventions = conventions;
  }

  public InstrumentLeg isPayNotReceive(Boolean isPayNotReceive) {
    this.isPayNotReceive = isPayNotReceive;
    return this;
  }

   /**
   * True if the holder of the swap pays, false if they receive the flows on this leg.
   * @return isPayNotReceive
  **/
  @ApiModelProperty(required = true, value = "True if the holder of the swap pays, false if they receive the flows on this leg.")
  public Boolean getIsPayNotReceive() {
    return isPayNotReceive;
  }

  public void setIsPayNotReceive(Boolean isPayNotReceive) {
    this.isPayNotReceive = isPayNotReceive;
  }

  public InstrumentLeg isFloatNotFixed(Boolean isFloatNotFixed) {
    this.isFloatNotFixed = isFloatNotFixed;
    return this;
  }

   /**
   * True if the payments float or are fixed.
   * @return isFloatNotFixed
  **/
  @ApiModelProperty(required = true, value = "True if the payments float or are fixed.")
  public Boolean getIsFloatNotFixed() {
    return isFloatNotFixed;
  }

  public void setIsFloatNotFixed(Boolean isFloatNotFixed) {
    this.isFloatNotFixed = isFloatNotFixed;
  }

  public InstrumentLeg fixedRate(Double fixedRate) {
    this.fixedRate = fixedRate;
    return this;
  }

   /**
   * If the leg is fixed, the fixed rate.
   * @return fixedRate
  **/
  @ApiModelProperty(required = true, value = "If the leg is fixed, the fixed rate.")
  public Double getFixedRate() {
    return fixedRate;
  }

  public void setFixedRate(Double fixedRate) {
    this.fixedRate = fixedRate;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstrumentLeg instrumentLeg = (InstrumentLeg) o;
    return Objects.equals(this.conventions, instrumentLeg.conventions) &&
        Objects.equals(this.isPayNotReceive, instrumentLeg.isPayNotReceive) &&
        Objects.equals(this.isFloatNotFixed, instrumentLeg.isFloatNotFixed) &&
        Objects.equals(this.fixedRate, instrumentLeg.fixedRate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conventions, isPayNotReceive, isFloatNotFixed, fixedRate);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstrumentLeg {\n");
    sb.append("    conventions: ").append(toIndentedString(conventions)).append("\n");
    sb.append("    isPayNotReceive: ").append(toIndentedString(isPayNotReceive)).append("\n");
    sb.append("    isFloatNotFixed: ").append(toIndentedString(isFloatNotFixed)).append("\n");
    sb.append("    fixedRate: ").append(toIndentedString(fixedRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
