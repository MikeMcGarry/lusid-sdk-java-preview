/*
 * LUSID API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1391
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * CorporateActionTransitionComponentRequest
 */

public class CorporateActionTransitionComponentRequest {
  public static final String SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS = "instrumentIdentifiers";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_IDENTIFIERS)
  private Map<String, String> instrumentIdentifiers = new HashMap<>();

  public static final String SERIALIZED_NAME_UNITS_FACTOR = "unitsFactor";
  @SerializedName(SERIALIZED_NAME_UNITS_FACTOR)
  private Double unitsFactor;

  public static final String SERIALIZED_NAME_COST_FACTOR = "costFactor";
  @SerializedName(SERIALIZED_NAME_COST_FACTOR)
  private Double costFactor;

  public CorporateActionTransitionComponentRequest instrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    this.instrumentIdentifiers = instrumentIdentifiers;
    return this;
  }

  public CorporateActionTransitionComponentRequest putInstrumentIdentifiersItem(String key, String instrumentIdentifiersItem) {
    this.instrumentIdentifiers.put(key, instrumentIdentifiersItem);
    return this;
  }

   /**
   * Unique instrument identifiers
   * @return instrumentIdentifiers
  **/
  @ApiModelProperty(required = true, value = "Unique instrument identifiers")
  public Map<String, String> getInstrumentIdentifiers() {
    return instrumentIdentifiers;
  }

  public void setInstrumentIdentifiers(Map<String, String> instrumentIdentifiers) {
    this.instrumentIdentifiers = instrumentIdentifiers;
  }

  public CorporateActionTransitionComponentRequest unitsFactor(Double unitsFactor) {
    this.unitsFactor = unitsFactor;
    return this;
  }

   /**
   * 
   * @return unitsFactor
  **/
  @ApiModelProperty(required = true, value = "")
  public Double getUnitsFactor() {
    return unitsFactor;
  }

  public void setUnitsFactor(Double unitsFactor) {
    this.unitsFactor = unitsFactor;
  }

  public CorporateActionTransitionComponentRequest costFactor(Double costFactor) {
    this.costFactor = costFactor;
    return this;
  }

   /**
   * 
   * @return costFactor
  **/
  @ApiModelProperty(required = true, value = "")
  public Double getCostFactor() {
    return costFactor;
  }

  public void setCostFactor(Double costFactor) {
    this.costFactor = costFactor;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CorporateActionTransitionComponentRequest corporateActionTransitionComponentRequest = (CorporateActionTransitionComponentRequest) o;
    return Objects.equals(this.instrumentIdentifiers, corporateActionTransitionComponentRequest.instrumentIdentifiers) &&
        Objects.equals(this.unitsFactor, corporateActionTransitionComponentRequest.unitsFactor) &&
        Objects.equals(this.costFactor, corporateActionTransitionComponentRequest.costFactor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instrumentIdentifiers, unitsFactor, costFactor);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CorporateActionTransitionComponentRequest {\n");
    sb.append("    instrumentIdentifiers: ").append(toIndentedString(instrumentIdentifiers)).append("\n");
    sb.append("    unitsFactor: ").append(toIndentedString(unitsFactor)).append("\n");
    sb.append("    costFactor: ").append(toIndentedString(costFactor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
