/*
 * LUSID API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1387
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * It is possible to control which supplier is used for a given asset class.
 */
@ApiModel(description = "It is possible to control which supplier is used for a given asset class.")

public class MarketContextSuppliers {
  /**
   * Gets or Sets commodity
   */
  @JsonAdapter(CommodityEnum.Adapter.class)
  public enum CommodityEnum {
    DATASCOPE("DataScope"),
    
    LUSID("Lusid"),
    
    ISDA("Isda"),
    
    CLIENT("Client"),
    
    EDI("Edi"),
    
    TRADERMADE("TraderMade"),
    
    FACTSET("FactSet");

    private String value;

    CommodityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CommodityEnum fromValue(String value) {
      for (CommodityEnum b : CommodityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CommodityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CommodityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CommodityEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CommodityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_COMMODITY = "Commodity";
  @SerializedName(SERIALIZED_NAME_COMMODITY)
  private CommodityEnum commodity;

  /**
   * Gets or Sets credit
   */
  @JsonAdapter(CreditEnum.Adapter.class)
  public enum CreditEnum {
    DATASCOPE("DataScope"),
    
    LUSID("Lusid"),
    
    ISDA("Isda"),
    
    CLIENT("Client"),
    
    EDI("Edi"),
    
    TRADERMADE("TraderMade"),
    
    FACTSET("FactSet");

    private String value;

    CreditEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreditEnum fromValue(String value) {
      for (CreditEnum b : CreditEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CreditEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreditEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreditEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CreditEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CREDIT = "Credit";
  @SerializedName(SERIALIZED_NAME_CREDIT)
  private CreditEnum credit;

  /**
   * Gets or Sets equity
   */
  @JsonAdapter(EquityEnum.Adapter.class)
  public enum EquityEnum {
    DATASCOPE("DataScope"),
    
    LUSID("Lusid"),
    
    ISDA("Isda"),
    
    CLIENT("Client"),
    
    EDI("Edi"),
    
    TRADERMADE("TraderMade"),
    
    FACTSET("FactSet");

    private String value;

    EquityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EquityEnum fromValue(String value) {
      for (EquityEnum b : EquityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EquityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EquityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EquityEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return EquityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EQUITY = "Equity";
  @SerializedName(SERIALIZED_NAME_EQUITY)
  private EquityEnum equity;

  /**
   * Gets or Sets fx
   */
  @JsonAdapter(FxEnum.Adapter.class)
  public enum FxEnum {
    DATASCOPE("DataScope"),
    
    LUSID("Lusid"),
    
    ISDA("Isda"),
    
    CLIENT("Client"),
    
    EDI("Edi"),
    
    TRADERMADE("TraderMade"),
    
    FACTSET("FactSet");

    private String value;

    FxEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FxEnum fromValue(String value) {
      for (FxEnum b : FxEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FxEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FxEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FxEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FxEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FX = "Fx";
  @SerializedName(SERIALIZED_NAME_FX)
  private FxEnum fx;

  /**
   * Gets or Sets rates
   */
  @JsonAdapter(RatesEnum.Adapter.class)
  public enum RatesEnum {
    DATASCOPE("DataScope"),
    
    LUSID("Lusid"),
    
    ISDA("Isda"),
    
    CLIENT("Client"),
    
    EDI("Edi"),
    
    TRADERMADE("TraderMade"),
    
    FACTSET("FactSet");

    private String value;

    RatesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RatesEnum fromValue(String value) {
      for (RatesEnum b : RatesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RatesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RatesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RatesEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RatesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RATES = "Rates";
  @SerializedName(SERIALIZED_NAME_RATES)
  private RatesEnum rates;

  public MarketContextSuppliers commodity(CommodityEnum commodity) {
    this.commodity = commodity;
    return this;
  }

   /**
   * Get commodity
   * @return commodity
  **/
  @ApiModelProperty(value = "")
  public CommodityEnum getCommodity() {
    return commodity;
  }

  public void setCommodity(CommodityEnum commodity) {
    this.commodity = commodity;
  }

  public MarketContextSuppliers credit(CreditEnum credit) {
    this.credit = credit;
    return this;
  }

   /**
   * Get credit
   * @return credit
  **/
  @ApiModelProperty(value = "")
  public CreditEnum getCredit() {
    return credit;
  }

  public void setCredit(CreditEnum credit) {
    this.credit = credit;
  }

  public MarketContextSuppliers equity(EquityEnum equity) {
    this.equity = equity;
    return this;
  }

   /**
   * Get equity
   * @return equity
  **/
  @ApiModelProperty(value = "")
  public EquityEnum getEquity() {
    return equity;
  }

  public void setEquity(EquityEnum equity) {
    this.equity = equity;
  }

  public MarketContextSuppliers fx(FxEnum fx) {
    this.fx = fx;
    return this;
  }

   /**
   * Get fx
   * @return fx
  **/
  @ApiModelProperty(value = "")
  public FxEnum getFx() {
    return fx;
  }

  public void setFx(FxEnum fx) {
    this.fx = fx;
  }

  public MarketContextSuppliers rates(RatesEnum rates) {
    this.rates = rates;
    return this;
  }

   /**
   * Get rates
   * @return rates
  **/
  @ApiModelProperty(value = "")
  public RatesEnum getRates() {
    return rates;
  }

  public void setRates(RatesEnum rates) {
    this.rates = rates;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarketContextSuppliers marketContextSuppliers = (MarketContextSuppliers) o;
    return Objects.equals(this.commodity, marketContextSuppliers.commodity) &&
        Objects.equals(this.credit, marketContextSuppliers.credit) &&
        Objects.equals(this.equity, marketContextSuppliers.equity) &&
        Objects.equals(this.fx, marketContextSuppliers.fx) &&
        Objects.equals(this.rates, marketContextSuppliers.rates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commodity, credit, equity, fx, rates);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarketContextSuppliers {\n");
    sb.append("    commodity: ").append(toIndentedString(commodity)).append("\n");
    sb.append("    credit: ").append(toIndentedString(credit)).append("\n");
    sb.append("    equity: ").append(toIndentedString(equity)).append("\n");
    sb.append("    fx: ").append(toIndentedString(fx)).append("\n");
    sb.append("    rates: ").append(toIndentedString(rates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
