/*
 * LUSID API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1390
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.CreateResults;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.Results;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ResultsApi {
    private ApiClient localVarApiClient;

    public ResultsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ResultsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getResults
     * @param entityScope The scope of the data or entity being stored (required)
     * @param entityCode The identifier for the data or results entity being stored (required)
     * @param calculationScope The identifying scope for the calculation that produced the result (required)
     * @param calculationCode The identifying calculation name for the results (required)
     * @param effectiveAt The market date for which the data is stored (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested set of results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResultsCall(String entityScope, String entityCode, String calculationScope, String calculationCode, OffsetDateTime effectiveAt, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/results/{entityScope}/{entityCode}/{calculationScope}/{calculationCode}/{effectiveAt}"
            .replaceAll("\\{" + "entityScope" + "\\}", localVarApiClient.escapeString(entityScope.toString()))
            .replaceAll("\\{" + "entityCode" + "\\}", localVarApiClient.escapeString(entityCode.toString()))
            .replaceAll("\\{" + "calculationScope" + "\\}", localVarApiClient.escapeString(calculationScope.toString()))
            .replaceAll("\\{" + "calculationCode" + "\\}", localVarApiClient.escapeString(calculationCode.toString()))
            .replaceAll("\\{" + "effectiveAt" + "\\}", localVarApiClient.escapeString(effectiveAt.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.10.1390");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResultsValidateBeforeCall(String entityScope, String entityCode, String calculationScope, String calculationCode, OffsetDateTime effectiveAt, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'entityScope' is set
        if (entityScope == null) {
            throw new ApiException("Missing the required parameter 'entityScope' when calling getResults(Async)");
        }
        
        // verify the required parameter 'entityCode' is set
        if (entityCode == null) {
            throw new ApiException("Missing the required parameter 'entityCode' when calling getResults(Async)");
        }
        
        // verify the required parameter 'calculationScope' is set
        if (calculationScope == null) {
            throw new ApiException("Missing the required parameter 'calculationScope' when calling getResults(Async)");
        }
        
        // verify the required parameter 'calculationCode' is set
        if (calculationCode == null) {
            throw new ApiException("Missing the required parameter 'calculationCode' when calling getResults(Async)");
        }
        
        // verify the required parameter 'effectiveAt' is set
        if (effectiveAt == null) {
            throw new ApiException("Missing the required parameter 'effectiveAt' when calling getResults(Async)");
        }
        

        okhttp3.Call localVarCall = getResultsCall(entityScope, entityCode, calculationScope, calculationCode, effectiveAt, _callback);
        return localVarCall;

    }

    /**
     * [EXPERIMENTAL] Retrieve a page of results all keyed by the provided parameters. The result store is not bi-temporal; a single date  addressed the market effectiveAt.
     * Retrieve pre-calculated results that have been stored in LUSID.
     * @param entityScope The scope of the data or entity being stored (required)
     * @param entityCode The identifier for the data or results entity being stored (required)
     * @param calculationScope The identifying scope for the calculation that produced the result (required)
     * @param calculationCode The identifying calculation name for the results (required)
     * @param effectiveAt The market date for which the data is stored (required)
     * @return Results
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested set of results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public Results getResults(String entityScope, String entityCode, String calculationScope, String calculationCode, OffsetDateTime effectiveAt) throws ApiException {
        ApiResponse<Results> localVarResp = getResultsWithHttpInfo(entityScope, entityCode, calculationScope, calculationCode, effectiveAt);
        return localVarResp.getData();
    }

    /**
     * [EXPERIMENTAL] Retrieve a page of results all keyed by the provided parameters. The result store is not bi-temporal; a single date  addressed the market effectiveAt.
     * Retrieve pre-calculated results that have been stored in LUSID.
     * @param entityScope The scope of the data or entity being stored (required)
     * @param entityCode The identifier for the data or results entity being stored (required)
     * @param calculationScope The identifying scope for the calculation that produced the result (required)
     * @param calculationCode The identifying calculation name for the results (required)
     * @param effectiveAt The market date for which the data is stored (required)
     * @return ApiResponse&lt;Results&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested set of results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Results> getResultsWithHttpInfo(String entityScope, String entityCode, String calculationScope, String calculationCode, OffsetDateTime effectiveAt) throws ApiException {
        okhttp3.Call localVarCall = getResultsValidateBeforeCall(entityScope, entityCode, calculationScope, calculationCode, effectiveAt, null);
        Type localVarReturnType = new TypeToken<Results>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EXPERIMENTAL] Retrieve a page of results all keyed by the provided parameters. The result store is not bi-temporal; a single date  addressed the market effectiveAt. (asynchronously)
     * Retrieve pre-calculated results that have been stored in LUSID.
     * @param entityScope The scope of the data or entity being stored (required)
     * @param entityCode The identifier for the data or results entity being stored (required)
     * @param calculationScope The identifying scope for the calculation that produced the result (required)
     * @param calculationCode The identifying calculation name for the results (required)
     * @param effectiveAt The market date for which the data is stored (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested set of results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResultsAsync(String entityScope, String entityCode, String calculationScope, String calculationCode, OffsetDateTime effectiveAt, final ApiCallback<Results> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResultsValidateBeforeCall(entityScope, entityCode, calculationScope, calculationCode, effectiveAt, _callback);
        Type localVarReturnType = new TypeToken<Results>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for upsertResults
     * @param request The details of what to upsert (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The results set uploaded </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertResultsCall(CreateResults request, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/results";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.10.1390");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertResultsValidateBeforeCall(CreateResults request, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = upsertResultsCall(request, _callback);
        return localVarCall;

    }

    /**
     * [EXPERIMENTAL] Upsert results
     * Upsert pre-calculated results against a specified combination of key parameters defined in the CreateResults request.
     * @param request The details of what to upsert (optional)
     * @return Results
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The results set uploaded </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public Results upsertResults(CreateResults request) throws ApiException {
        ApiResponse<Results> localVarResp = upsertResultsWithHttpInfo(request);
        return localVarResp.getData();
    }

    /**
     * [EXPERIMENTAL] Upsert results
     * Upsert pre-calculated results against a specified combination of key parameters defined in the CreateResults request.
     * @param request The details of what to upsert (optional)
     * @return ApiResponse&lt;Results&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The results set uploaded </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Results> upsertResultsWithHttpInfo(CreateResults request) throws ApiException {
        okhttp3.Call localVarCall = upsertResultsValidateBeforeCall(request, null);
        Type localVarReturnType = new TypeToken<Results>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EXPERIMENTAL] Upsert results (asynchronously)
     * Upsert pre-calculated results against a specified combination of key parameters defined in the CreateResults request.
     * @param request The details of what to upsert (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The results set uploaded </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertResultsAsync(CreateResults request, final ApiCallback<Results> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertResultsValidateBeforeCall(request, _callback);
        Type localVarReturnType = new TypeToken<Results>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
