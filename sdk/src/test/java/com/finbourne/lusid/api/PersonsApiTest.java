/*
 * LUSID API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1386
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.model.AccessMetadataValue;
import com.finbourne.lusid.model.DeletedEntityResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.Person;
import com.finbourne.lusid.model.ResourceListOfAccessMetadataValueOf;
import com.finbourne.lusid.model.ResourceListOfPerson;
import com.finbourne.lusid.model.UpsertPersonAccessMetadataRequest;
import com.finbourne.lusid.model.UpsertPersonRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PersonsApi
 */
@Ignore
public class PersonsApiTest {

    private final PersonsApi api = new PersonsApi();

    
    /**
     * [EXPERIMENTAL] Delete person
     *
     * Delete a person. Deletion will be valid from the person&#39;s creation datetime.  This means that the person will no longer exist at any effective datetime from the asAt datetime of deletion.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePersonTest() throws ApiException {
        String idTypeScope = null;
        String idTypeCode = null;
        String code = null;
        DeletedEntityResponse response = api.deletePerson(idTypeScope, idTypeCode, code);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] Delete a Person Access Metadata entry
     *
     * Deletes the Person Access Metadata entry that exactly matches the provided identifier parts.    It is important to always check to verify success (or failure).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePersonAccessMetadataTest() throws ApiException {
        String idTypeScope = null;
        String idTypeCode = null;
        String code = null;
        String metadataKey = null;
        String effectiveAt = null;
        DeletedEntityResponse response = api.deletePersonAccessMetadata(idTypeScope, idTypeCode, code, metadataKey, effectiveAt);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] Get Access Metadata rules for a Person
     *
     * Pass the Scope and Code of the Person identifier along with the person code parameter to retrieve the associated Access Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllPersonAccessMetadataTest() throws ApiException {
        String idTypeScope = null;
        String idTypeCode = null;
        String code = null;
        String effectiveAt = null;
        OffsetDateTime asAt = null;
        Map<String, List<AccessMetadataValue>> response = api.getAllPersonAccessMetadata(idTypeScope, idTypeCode, code, effectiveAt, asAt);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] Get Person
     *
     * Retrieve the definition of a person.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPersonTest() throws ApiException {
        String idTypeScope = null;
        String idTypeCode = null;
        String code = null;
        List<String> propertyKeys = null;
        String effectiveAt = null;
        OffsetDateTime asAt = null;
        Person response = api.getPerson(idTypeScope, idTypeCode, code, propertyKeys, effectiveAt, asAt);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] Get an entry identified by a metadataKey in the Access Metadata of a Person
     *
     * Get a specific Person Access Metadata by specifying the corresponding identifier parts and Person code                No matching will be performed through this endpoint. To retrieve an entry, it is necessary to specify, exactly, the identifier of the entry
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPersonAccessMetadataByKeyTest() throws ApiException {
        String idTypeScope = null;
        String idTypeCode = null;
        String code = null;
        String metadataKey = null;
        String effectiveAt = null;
        OffsetDateTime asAt = null;
        List<AccessMetadataValue> response = api.getPersonAccessMetadataByKey(idTypeScope, idTypeCode, code, metadataKey, effectiveAt, asAt);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] List Persons
     *
     * List persons which has identifier of specific identifier type&#39;s scope and code, and satisfies filter criteria.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPersonsTest() throws ApiException {
        String idTypeScope = null;
        String idTypeCode = null;
        String effectiveAt = null;
        OffsetDateTime asAt = null;
        String page = null;
        Integer start = null;
        Integer limit = null;
        String filter = null;
        List<String> propertyKeys = null;
        ResourceListOfPerson response = api.listPersons(idTypeScope, idTypeCode, effectiveAt, asAt, page, start, limit, filter, propertyKeys);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] Upsert Person
     *
     * Create or update new person under specified scope
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void upsertPersonTest() throws ApiException {
        UpsertPersonRequest request = null;
        Person response = api.upsertPerson(request);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] Upsert a Person Access Metadata entry associated with a specific metadataKey. This creates or updates the data in LUSID.
     *
     * Update or insert one Person Access Metadata entry in a single scope. An item will be updated if it already exists  and inserted if it does not.                The response will return the successfully updated or inserted Person Access Metadata rule or failure message if unsuccessful.                It is important to always check to verify success (or failure).                Multiple rules for a metadataKey can exist with different effective at dates, when resources are accessed the rule that is active for the current time will be fetched.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void upsertPersonAccessMetadataTest() throws ApiException {
        String idTypeScope = null;
        String idTypeCode = null;
        String code = null;
        String metadataKey = null;
        UpsertPersonAccessMetadataRequest request = null;
        String effectiveAt = null;
        ResourceListOfAccessMetadataValueOf response = api.upsertPersonAccessMetadata(idTypeScope, idTypeCode, code, metadataKey, request, effectiveAt);

        // TODO: test validations
    }
    
}
