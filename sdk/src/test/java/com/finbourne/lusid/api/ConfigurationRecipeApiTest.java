/*
 * LUSID API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1387
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.model.AnnulSingleStructuredDataResponse;
import com.finbourne.lusid.model.GetRecipeResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.ResourceListOfGetRecipeResponse;
import com.finbourne.lusid.model.UpsertRecipeRequest;
import com.finbourne.lusid.model.UpsertSingleStructuredDataResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConfigurationRecipeApi
 */
@Ignore
public class ConfigurationRecipeApiTest {

    private final ConfigurationRecipeApi api = new ConfigurationRecipeApi();

    
    /**
     * [EXPERIMENTAL] Delete a Configuration Recipe, assuming that it is present.
     *
     * Delete the specified Configuration Recipe from a single scope.                The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.                It is important to always check for any unsuccessful response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigurationRecipeTest() throws ApiException {
        String scope = null;
        String code = null;
        AnnulSingleStructuredDataResponse response = api.deleteConfigurationRecipe(scope, code);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] Get Configuration Recipe
     *
     * Get a Configuration Recipe from a single scope.                The response will return either the recipe that has been stored, or a failure explaining why the request was unsuccessful.                It is important to always check for any unsuccessful requests (failures).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConfigurationRecipeTest() throws ApiException {
        String scope = null;
        String code = null;
        OffsetDateTime asAt = null;
        GetRecipeResponse response = api.getConfigurationRecipe(scope, code, asAt);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] List the set of Configuration Recipes
     *
     * List the set of  configuration recipes at the specified date/time and scope
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listConfigurationRecipesTest() throws ApiException {
        String scope = null;
        OffsetDateTime asAt = null;
        String filter = null;
        ResourceListOfGetRecipeResponse response = api.listConfigurationRecipes(scope, asAt, filter);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] Upsert a Configuration Recipe. This creates or updates the data in Lusid.
     *
     * Update or insert one Configuration Recipe in a single scope. An item will be updated if it already exists  and inserted if it does not.                The response will return the successfully updated or inserted Configuration Recipe or failure message if unsuccessful                It is important to always check to verify success (or failure).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void upsertConfigurationRecipeTest() throws ApiException {
        String scope = null;
        UpsertRecipeRequest structuredData = null;
        UpsertSingleStructuredDataResponse response = api.upsertConfigurationRecipe(scope, structuredData);

        // TODO: test validations
    }
    
}
