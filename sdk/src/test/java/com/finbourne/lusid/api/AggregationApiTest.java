/*
 * LUSID API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1387
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.model.AggregationRequest;
import com.finbourne.lusid.model.InlineAggregationRequest;
import com.finbourne.lusid.model.ListAggregationResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import com.finbourne.lusid.model.NestedAggregationResponse;
import com.finbourne.lusid.model.QueryableEntitiesResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AggregationApi
 */
@Ignore
public class AggregationApiTest {

    private final AggregationApi api = new AggregationApi();

    
    /**
     * [EXPERIMENTAL] Aggregate data in a portfolio group
     *
     * Aggregate data sourced from the specified portfolio group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAggregationByGroupTest() throws ApiException {
        String scope = null;
        String code = null;
        List<String> sortBy = null;
        Integer start = null;
        Integer limit = null;
        AggregationRequest request = null;
        ListAggregationResponse response = api.getAggregationByGroup(scope, code, sortBy, start, limit, request);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] Aggregate data in a portfolio
     *
     * Aggregate data sourced from the specified portfolio
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAggregationByPortfolioTest() throws ApiException {
        String scope = null;
        String code = null;
        List<String> sortBy = null;
        Integer start = null;
        Integer limit = null;
        AggregationRequest request = null;
        ListAggregationResponse response = api.getAggregationByPortfolio(scope, code, sortBy, start, limit, request);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] Aggregate using result data
     *
     * Aggregate data from a previously-run Result data set into a flat row of results
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAggregationByResultSetTest() throws ApiException {
        String scope = null;
        String resultsKey = null;
        List<String> sortBy = null;
        Integer start = null;
        Integer limit = null;
        AggregationRequest request = null;
        ListAggregationResponse response = api.getAggregationByResultSet(scope, resultsKey, sortBy, start, limit, request);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] Aggregate data in an inlined portfolio
     *
     * Aggregate data sourced from the portfolio that is defined by the weighted set of instruments passed to the request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAggregationOfWeightedInstrumentsTest() throws ApiException {
        String scope = null;
        List<String> sortBy = null;
        Integer start = null;
        Integer limit = null;
        InlineAggregationRequest inlineRequest = null;
        ListAggregationResponse response = api.getAggregationOfWeightedInstruments(scope, sortBy, start, limit, inlineRequest);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] Aggregate data in a portfolio group, as nested
     *
     * Obsolete - Aggregate data sourced from the specified portfolio group into a nested structure. Data is nested following the group-by specifications.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNestedAggregationByGroupTest() throws ApiException {
        String scope = null;
        String code = null;
        AggregationRequest request = null;
        NestedAggregationResponse response = api.getNestedAggregationByGroup(scope, code, request);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] 
     *
     * Aggregate data in a portfolio, as nested
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNestedAggregationByPortfolioTest() throws ApiException {
        String scope = null;
        String code = null;
        AggregationRequest request = null;
        NestedAggregationResponse response = api.getNestedAggregationByPortfolio(scope, code, request);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] Query the set of supported \&quot;addresses\&quot; that can be queried from the aggregation endpoint.
     *
     * When a request is made for aggregation, the user needs to know what keys can be passed to it for queryable data. This endpoint allows to queries to provide the set of keys,  what they are and what they return.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQueryableKeysTest() throws ApiException {
        String pagination = null;
        Integer start = null;
        Integer limit = null;
        String filter = null;
        QueryableEntitiesResponse response = api.getQueryableKeys(pagination, start, limit, filter);

        // TODO: test validations
    }
    
}
